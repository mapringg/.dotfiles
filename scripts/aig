#!/bin/bash

# Function to copy to clipboard based on OS
copy_to_clipboard() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        pbcopy
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        if command -v xclip &> /dev/null; then
            xclip -selection clipboard
        else
            echo "Error: xclip is not installed. Please install it first." >&2
            exit 1
        fi
    else
        echo "Error: Unsupported operating system" >&2
        exit 1
    fi
}

# Function to process a single file
process_file() {
    local file_path="$1"
    
    # Check if the file exists
    if [ ! -f "$file_path" ]; then
        echo "Error: File not found: $file_path" >&2
        return 1
    fi
    
    # Extract the file extension
    local extension="${file_path##*.}"
    
    # Output the filename as a header
    echo "### File: $file_path"
    
    # Output the opening triple backticks with the file extension
    echo '```'"$extension"
    
    # Read and output the file content
    cat "$file_path" || {
        echo "Error: Unable to read file: $file_path" >&2
        return 1
    }
    
    # Output the closing triple backticks on a new line
    echo
    echo '```'
    
    # Add a newline for separation
    echo
}

# Get list of changed files from Git (including untracked and staged)
changed_files=$(git status --porcelain | awk '{print $2}')

# Check if any files have changed
if [ -z "$changed_files" ]; then
    echo "No changed files found. Exiting."
    exit 0
fi

# Process each changed file and store the output
output=$(echo "$changed_files" | while read -r file; do
    if [ -f "$file" ]; then
        process_file "$file"
    fi
done)

# Copy the output to clipboard
echo "$output" | copy_to_clipboard

# Also print the output to the terminal
echo "$output"

echo "Output of changed files (including untracked and staged) has been copied to clipboard."